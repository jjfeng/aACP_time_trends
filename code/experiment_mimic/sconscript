import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

START_YEAR = 2009
NUM_YEARS = 11
HUMAN_LOSS = 0.25

nest.add(
    'seed',
    range(1),
    label_func=lambda c: 'seed_%d' % c)

nest.add_aggregate('proposer_list', list)

nest.add(
    'year',
    range(START_YEAR, START_YEAR + NUM_YEARS),
    label_func=lambda c: 'year_%d' % c)

@nest.add_target_with_env(localenv)
def fit_mimic_year_model(env, outdir, c):
    targets = [
        join(outdir, 'model.pkl'),
        join(outdir, 'model_log.txt')]
    c['proposer_list'].append(targets[0])
    cmd = [
        'python fit_mimic_year_model.py',
	'--year',
        c['year'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.pop('year')

@nest.add_target_with_env(localenv)
def create_nature(env, outdir, c):
    targets = [
        join(outdir, 'nature.pkl'),
        join(outdir, 'nature_log.txt')]
    cmd = [
        'python create_mimic_nature.py',
        '--start-year',
        START_YEAR,
        '--num-years',
        NUM_YEARS,
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def create_proposer(env, outdir, c):
    targets = [
        join(outdir, 'proposer.pkl')]
    cmd = [
        'python create_mimic_proposer.py "experiment_mimic/_output/seed_0/year_%d/model.pkl"',
        '--start-year',
        START_YEAR,
        '--num-years',
        NUM_YEARS,
		'--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['proposer_list'],
        ' '.join(map(str, cmd)))

nest.add_aggregate('approval_hists', list)

#nest.add(
#    'eta',
#    [1.5],
#    label_func=lambda c: 'eta_%.2f' % c)
#
#
#@nest.add_target_with_env(localenv)
#def run_meta_exp(env, outdir, c):
#    targets = [
#        join(outdir, 'meta_exp_approval_hist.pkl'),
#        join(outdir, 'meta_exp_approval_hist_log.txt'),
#    ]
#    c['approval_hists'].append(targets[0])
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--eta',
#        c['eta'],
#        '--human-max-loss',
#        HUMAN_LOSS,
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name MetaExpWeighting',
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))
#
#
#nest.add(
#    'alpha',
#    [],
#    label_func=lambda c: 'alpha_%.2f' % c)
#
#@nest.add_target_with_env(localenv)
#def run_online(env, outdir, c):
#    targets = [
#        join(outdir, 'online_approval_hist.pkl'),
#        join(outdir, 'online_approval_hist_log.txt'),
#    ]
#    c['approval_hists'].append(targets[0])
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--eta',
#        c['eta'],
#        '--alpha',
#        c['alpha'],
#        '--human-max-loss',
#        HUMAN_LOSS,
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name MarkovHedge',
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))
#
#nest.pop('eta')
#
@nest.add_target_with_env(localenv)
def run_ttest_approval(env, outdir, c):
    targets = [
        join(outdir, 'ttest_approval_hist.pkl'),
        join(outdir, 'ttest_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name TTestApproval',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def run_blind_approval(env, outdir, c):
    targets = [
        join(outdir, 'blind_approval_hist.pkl'),
        join(outdir, 'blind_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name BlindApproval',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def run_fixed_approval(env, outdir, c):
    targets = [
        join(outdir, 'fixed_approval_hist.pkl'),
        join(outdir, 'fixed_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name FixedPolicy',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def plot_all_hists(env, outdir, c):
    targets = [
        join(outdir, 'approval_hist_loss.png'),
        join(outdir, 'approval_hist_human.png'),
    ]
    history_files = ",".join(["experiment_mimic/%s" % s for s in c['approval_hists']])
    cmd = [
        'python plot_policies.py',
	'--y-min',
        0.1,
	'--y-max',
        0.3,
	'--history-files',
        history_files,
	'--loss-plot ${TARGETS[0]}',
	'--human-plot ${TARGETS[1]}',
    ]

    return env.Command(
        targets,
        c['approval_hists'],
        ' '.join(map(str, cmd)))
