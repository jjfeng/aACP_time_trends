import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

NUM_HIDDEN = 50
NUM_EPOCHS = 500

MAX_TRAIN = 2000
START_YEAR = 2008
NUM_YEARS = 11
NUM_MONTHS = 4
MAX_LOSS = 4
HUMAN_LOSS = 1/MAX_LOSS
CONTROL_FACTOR = 1.6

nest.add(
    'seed',
    range(1),
    label_func=lambda c: 'seed_%d' % c)

nest.add_aggregate('proposer_list', list)
nest.add_aggregate('valid_data_list', list)

nest.add(
    'year',
    range(START_YEAR, START_YEAR + NUM_YEARS),
    label_func=lambda c: 'year_%d' % c)

nest.add(
    'month',
    range(1, 1 + NUM_MONTHS),
    label_func=lambda c: 'month_%d' % c)

@nest.add_target_with_env(localenv)
def create_yelp_data(env, outdir, c):
    targets = [
        join(outdir, 'yelp_data_train.json'),
        join(outdir, 'yelp_data_valid.json')]
    c['valid_data_list'].append(targets[1])
    cmd = [
        'python run_script.py',
        '${TARGETS[0]}',
        'process_yelp.py',
	'--seed',
    c['seed'],
	'--split-ratio 0.5',
	'--max-train',
    MAX_TRAIN,
	'--year',
        c['year'],
	'--month',
        c['month'],
	'--out-train-file ${TARGETS[0]}',
	'--out-valid-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_yelp_year_month_model(env, outdir, c):
    targets = [
        join(outdir, 'model.pkl'),
        join(outdir, 'model_log.txt')]
    c['proposer_list'].append(targets[0])
    cmd = [
        'python run_script.py',
        '${TARGETS[0]}',
        'fit_yelp_year_month_model.py',
	'--train-file ${SOURCES[0]}',
	'--num-hidden',
        NUM_HIDDEN,
	'--year',
        c['year'],
	'--month',
        c['month'],
	'--epochs',
        NUM_EPOCHS,
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['create_yelp_data'][:1],
        ' '.join(map(str, cmd)))

nest.pop('year')

@nest.add_target_with_env(localenv)
def create_nature(env, outdir, c):
    targets = [
        join(outdir, 'nature.pkl'),
        join(outdir, 'nature_log.txt')]
    valid_data_template = c['valid_data_list'][0].replace("year_%d" % START_YEAR,
    "year_%d").replace("month_1", "month_%d")
    cmd = [
        'python create_yelp_nature.py',
        '--valid-data-template',
        '"experiment_yelp/%s"' % valid_data_template,
        '--batch-size',
        MAX_TRAIN,
        '--start-year',
        START_YEAR,
        '--num-years',
        NUM_YEARS,
        '--num-months',
        NUM_MONTHS,
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['valid_data_list'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def create_proposer(env, outdir, c):
    targets = [
        join(outdir, 'proposer.pkl'),
        join(outdir, 'proposer_log.txt')]
    model_template = c['proposer_list'][0].replace("year_%d" % START_YEAR,
    "year_%d").replace("month_1", "month_%d")
    cmd = [
        'python create_yelp_proposer.py',
        '"experiment_yelp/%s"' % model_template,
        '--max-loss',
        MAX_LOSS,
        '--start-year',
        START_YEAR,
        '--num-years',
        NUM_YEARS,
        '--num-months',
        NUM_MONTHS,
	'--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['proposer_list'],
        ' '.join(map(str, cmd)))

nest.add_aggregate('approval_hists', list)

@nest.add_target_with_env(localenv)
def run_meta_exp(env, outdir, c):
    targets = [
        join(outdir, 'meta_exp_approval_hist.pkl'),
        join(outdir, 'meta_exp_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--control-error-factor',
        CONTROL_FACTOR,
        '--ci-alpha 0.025',
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name MetaExpWeighting',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.add(
    'eta',
    [1.5],
    label_func=lambda c: 'eta_%.2f' % c)



nest.add(
    'alpha',
    [0.5],
    label_func=lambda c: 'alpha_%.2f' % c)

@nest.add_target_with_env(localenv)
def run_online(env, outdir, c):
    targets = [
        join(outdir, 'online_approval_hist.pkl'),
        join(outdir, 'online_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--eta',
        c['eta'],
        '--alpha',
        c['alpha'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name MarkovHedge',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.pop('eta')

@nest.add_target_with_env(localenv)
def run_ttest_approval(env, outdir, c):
    targets = [
        join(outdir, 'ttest_approval_hist.pkl'),
        join(outdir, 'ttest_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name TTestApproval',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def run_blind_approval(env, outdir, c):
    targets = [
        join(outdir, 'blind_approval_hist.pkl'),
        join(outdir, 'blind_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name BlindApproval',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def run_fixed_approval(env, outdir, c):
    targets = [
        join(outdir, 'fixed_approval_hist.pkl'),
        join(outdir, 'fixed_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name FixedPolicy',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def plot_all_hists(env, outdir, c):
    targets = [
        join(outdir, 'approval_hist_loss.png'),
        join(outdir, 'approval_hist_human.png'),
    ]
    history_files = ",".join(["experiment_yelp/%s" % s for s in c['approval_hists']])
    cmd = [
        'python plot_policies.py',
	'--y-min',
        0,
	'--y-max',
        0.5,
	'--history-files',
        history_files,
	'--loss-plot ${TARGETS[0]}',
	'--human-plot ${TARGETS[1]}',
    ]

    return env.Command(
        targets,
        c['approval_hists'],
        ' '.join(map(str, cmd)))
