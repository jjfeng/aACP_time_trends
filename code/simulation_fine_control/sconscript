import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

NUM_TEST_OBS = 40000
HUMAN_LOSS = 0.33
SIMULATION_DICT = {
    "moody": {
        "updater": "moody",
        "num_batches": 15,
        "batch_size": 200,
        "batch_incr": 0},
}

nest.add(
    "setting",
    [
        "moody",
    ]
)

nest.add(
    'seed',
    range(1),
    label_func=lambda c: 'seed_%d' % c)

@nest.add_target_with_env(localenv)
def create_nature(env, outdir, c):
    targets = [
        join(outdir, 'nature.pkl'),
        join(outdir, 'nature_log.txt')]
    cmd = [
        'python create_nature.py',
        '--density-parametric bernoulli',
        '--first-batch',
        SIMULATION_DICT[c['setting']]['batch_size'],
        '--batch-size',
        SIMULATION_DICT[c['setting']]['batch_size'],
        '--batch-incr',
        SIMULATION_DICT[c['setting']]['batch_incr'],
        '--num-batches',
        SIMULATION_DICT[c['setting']]['num_batches'],
        '--num-p 1',
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'sin_decay',
    [0.3],
    label_func=lambda c: 'sin_decay_%.2f' % c)

@nest.add_target_with_env(localenv)
def create_proposer(env, outdir, c):
    targets = [
        join(outdir, 'proposer.pkl'),
        join(outdir, 'proposer_log.txt')]
    cmd = [
        'python create_proposer.py',
        '--density-parametric bernoulli',
        '--update-engine random',
        '--proposer-noise 0.2',
        '--proposer-increment 0.2',
        '--proposer-offset 0.1',
        '--proposer-decay',
        c['sin_decay'],
        '--num-p 1',
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'policy',
    ['MD'])

nest.add(
    'eta',
    #[0.5,1,2,4,8,16],
    [8,],
    label_func=lambda c: 'eta_%d' % c)

@nest.add_target_with_env(localenv)
def run_approval(env, outdir, c):
    targets = [
        join(outdir, 'approval_hist.pkl'),
        join(outdir, 'approval_hist_log.txt')]
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--eta',
        c['eta'],
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name',
        c['policy'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.pop('policy')
#
#nest.add(
#    'policy',
#    ['OMD'])
#
#nest.add(
#    'eta',
#    [0.5,1,2,4,8,16],
#    label_func=lambda c: 'eta_%d' % c)
#
#@nest.add_target_with_env(localenv)
#def run_approval(env, outdir, c):
#    targets = [
#        join(outdir, 'approval_hist.pkl'),
#        join(outdir, 'approval_hist_log.txt')]
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--eta',
#        c['eta'],
#        '--human-max-loss',
#        HUMAN_LOSS,
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name',
#        c['policy'],
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))


nest.add(
    'policy',
    ['Optimistic'])

@nest.add_target_with_env(localenv)
def run_approval(env, outdir, c):
    targets = [
        join(outdir, 'approval_hist.pkl'),
        join(outdir, 'approval_hist_log.txt')]
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--eta 0',
        '--human-max-loss',
        HUMAN_LOSS,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name',
        c['policy'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


