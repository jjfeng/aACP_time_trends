import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

DENSITY = "gaussian"
NUM_TEST_OBS = 40000
INIT_BATCH_SIZE = 20
NUM_P = 50
BATCH_SIZE = 10
NUM_BATCHES = 100

nest.add(
    'seed',
    range(1),
    label_func=lambda c: 'seed_%d' % c)

@nest.add_target_with_env(localenv)
def create_nature(env, outdir, c):
    targets = [
        join(outdir, 'nature.pkl'),
        join(outdir, 'nature_log.txt')]
    cmd = [
        'python create_fixed_nature.py',
        '--density-parametric',
        DENSITY,
        '--first-batch',
        INIT_BATCH_SIZE,
        '--batch-size',
        BATCH_SIZE,
        '--batch-incr 0',
        '--y-sigma 0.05',
        '--num-batches',
        NUM_BATCHES,
        '--num-p',
        NUM_P,
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def create_proposer(env, outdir, c):
    targets = [
        join(outdir, 'proposer.pkl'),
        join(outdir, 'proposer_log.txt')]
    cmd = [
        'python create_lasso_proposer.py',
        '--density-parametric',
        DENSITY,
        '--proposer-cv 3',
        '--proposer-alphas 30',
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'eta',
    [1],
    label_func=lambda c: 'eta_%.2f' % c)

@nest.add_target_with_env(localenv)
def run_fixedshare_mono(env, outdir, c):
    targets = [
        join(outdir, 'fixedshare_mono_approval_hist.pkl'),
        join(outdir, 'fixedshare_mono_approval_hist_log.txt'),
    ]
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--eta',
        c['eta'],
        '--alpha 0.4',
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name MonotonicFixedShare',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_fixedshare_mono(env, outdir, c):
    targets = [
        join(outdir, 'fixedshare_mono_approval_hist_loss.png'),
        join(outdir, 'fixedshare_mono_approval_hist_human.png'),
    ]
    cmd = [
        'python plot_history.py',
        '--policy-name MonotonicFixedShare',
	'--history-file ${SOURCES[0]}',
	'--loss-plot ${TARGETS[0]}',
	'--human-plot ${TARGETS[1]}']

    return env.Command(
        targets,
        c['run_fixedshare_mono'],
        ' '.join(map(str, cmd)))


#@nest.add_target_with_env(localenv)
#def run_fixedshare_blind(env, outdir, c):
#    targets = [
#        join(outdir, 'fixedshare_blind_approval_hist.pkl'),
#        join(outdir, 'fixedshare_blind_approval_hist_log.txt'),
#    ]
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--eta',
#        c['eta'],
#        '--alpha 0.2',
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name FixedShareWithBlind',
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def plot_fixedshare_blind(env, outdir, c):
#    targets = [
#        join(outdir, 'fixedshare_blind_approval_hist_loss.png'),
#        join(outdir, 'fixedshare_blind_approval_hist_human.png'),
#    ]
#    cmd = [
#        'python plot_history.py',
#        '--policy-name FixedShareWithBlind',
#	'--history-file ${SOURCES[0]}',
#	'--loss-plot ${TARGETS[0]}',
#	'--human-plot ${TARGETS[1]}']
#
#    return env.Command(
#        targets,
#        c['run_fixedshare_blind'],
#        ' '.join(map(str, cmd)))
#
#
#@nest.add_target_with_env(localenv)
#def run_fixedshare(env, outdir, c):
#    targets = [
#        join(outdir, 'fixedshare_approval_hist.pkl'),
#        join(outdir, 'fixedshare_approval_hist_log.txt'),
#    ]
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--eta',
#        c['eta'],
#        '--alpha 0.2',
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name FixedShare',
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def plot_fixedshare(env, outdir, c):
#    targets = [
#        join(outdir, 'fixedshare_approval_hist_loss.png'),
#        join(outdir, 'fixedshare_approval_hist_human.png'),
#    ]
#    cmd = [
#        'python plot_history.py',
#        '--policy-name FixedShare',
#	'--history-file ${SOURCES[0]}',
#	'--loss-plot ${TARGETS[0]}',
#	'--human-plot ${TARGETS[1]}']
#
#    return env.Command(
#        targets,
#        c['run_fixedshare'],
#        ' '.join(map(str, cmd)))
#
#nest.pop('eta')
#
#@nest.add_target_with_env(localenv)
#def run_blind_approval(env, outdir, c):
#    targets = [
#        join(outdir, 'blind_approval_hist.pkl'),
#        join(outdir, 'blind_approval_hist_log.txt'),
#    ]
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name BlindApproval',
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))
#
#
#@nest.add_target_with_env(localenv)
#def plot_blind(env, outdir, c):
#    targets = [
#        join(outdir, 'blind_approval_hist_loss.png'),
#        join(outdir, 'blind_approval_hist_human.png'),
#    ]
#    cmd = [
#        'python plot_history.py',
#        '--policy-name BlindApproval',
#	'--history-file ${SOURCES[0]}',
#	'--loss-plot ${TARGETS[0]}',
#	'--human-plot ${TARGETS[1]}']
#
#    return env.Command(
#        targets,
#        c['run_blind_approval'],
#        ' '.join(map(str, cmd)))
#
#
#
#@nest.add_target_with_env(localenv)
#def run_ttest_approval(env, outdir, c):
#    targets = [
#        join(outdir, 'ttest_approval_hist.pkl'),
#        join(outdir, 'ttest_approval_hist_log.txt'),
#    ]
#    cmd = [
#        'python run_approval.py',
#        '--seed',
#        c['seed'],
#        '--nature-file ${SOURCES[0]}',
#        '--proposer-file ${SOURCES[1]}',
#        '--policy-name TTestApproval',
#	'--out-file ${TARGETS[0]}',
#	'--log-file ${TARGETS[1]}']
#
#    sources = [c['create_nature'][0], c['create_proposer'][0]]
#    return env.Command(
#        targets,
#        sources,
#        ' '.join(map(str, cmd)))
#
#
#@nest.add_target_with_env(localenv)
#def plot_ttest(env, outdir, c):
#    targets = [
#        join(outdir, 'ttest_approval_hist_loss.png'),
#        join(outdir, 'ttest_approval_hist_human.png'),
#    ]
#    cmd = [
#        'python plot_history.py',
#        '--policy-name TTestApproval',
#	'--history-file ${SOURCES[0]}',
#	'--loss-plot ${TARGETS[0]}',
#	'--human-plot ${TARGETS[1]}']
#
#    return env.Command(
#        targets,
#        c['run_ttest_approval'],
#        ' '.join(map(str, cmd)))
#
#
