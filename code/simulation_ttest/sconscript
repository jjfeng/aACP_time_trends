import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

DENSITY = "bernoulli"
NUM_P = 40
INIT_BATCH_SIZE = 50
BATCH_SIZE = 75
NUM_BATCHES = 50
NUM_COEFS = 15
COEF_SCALE = 10
CONTROL_FACTOR = 1.6
CI_ALPHA = 0.1

nest.add(
    'seed',
    range(1),
    label_func=lambda c: 'seed_%d' % c)

@nest.add_target_with_env(localenv)
def create_nature(env, outdir, c):
    targets = [
        join(outdir, 'nature.pkl'),
        join(outdir, 'nature_log.txt')]
    cmd = [
        'python create_fixed_nature.py',
        '--density-parametric',
        DENSITY,
        '--first-batch',
        INIT_BATCH_SIZE,
        '--batch-size',
        BATCH_SIZE,
        '--batch-incr 0',
        '--num-batches',
        NUM_BATCHES,
        '--num-p',
        NUM_P,
        '--num-coefs',
        NUM_COEFS,
        '--coef-scale',
        COEF_SCALE,
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def create_proposer(env, outdir, c):
    targets = [
        join(outdir, 'proposer.pkl'),
        join(outdir, 'proposer_log.txt')]
    batches = [i if i % 4 == 1 else 1 for i in range(NUM_BATCHES)]
    cmd = [
        'python create_lasso_proposer.py',
        '--density-parametric',
        DENSITY,
        '--proposer-cv 3',
        '--proposer-alphas 30',
        '--proposer-batches',
        ','.join([str(b) for b in batches]),
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add_aggregate('approval_hists', list)

@nest.add_target_with_env(localenv)
def run_meta_exp(env, outdir, c):
    targets = [
        join(outdir, 'meta_exp_approval_hist.pkl'),
        join(outdir, 'meta_exp_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--control-error-factor',
        CONTROL_FACTOR,
        '--ci-alpha',
        CI_ALPHA,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name MetaExpWeighting',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_meta_exp_small(env, outdir, c):
    targets = [
        join(outdir, 'meta_exp_approval_small_hist.pkl'),
        join(outdir, 'meta_exp_approval_small_list_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--control-error-factor',
        CONTROL_FACTOR,
        '--ci-alpha',
        CI_ALPHA,
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name MetaExpWeightingSmall',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.add(
    'eta',
    [1.5],
    label_func=lambda c: 'eta_%.2f' % c)

nest.add(
    'alpha',
    [0.3],
    label_func=lambda c: 'alpha_%.2f' % c)

@nest.add_target_with_env(localenv)
def run_online(env, outdir, c):
    targets = [
        join(outdir, 'online_approval_hist.pkl'),
        join(outdir, 'online_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--eta',
        c['eta'],
        '--alpha',
        c['alpha'],
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name MarkovHedge',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.pop('eta')

@nest.add_target_with_env(localenv)
def run_ttest_approval(env, outdir, c):
    targets = [
        join(outdir, 'ttest_approval_hist.pkl'),
        join(outdir, 'ttest_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name TTestApproval',
        '--ci-alpha',
        CI_ALPHA,
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def run_blind_approval(env, outdir, c):
    targets = [
        join(outdir, 'blind_approval_hist.pkl'),
        join(outdir, 'blind_approval_hist_log.txt'),
    ]
    c['approval_hists'].append(targets[0])
    cmd = [
        'python run_approval.py',
        '--seed',
        c['seed'],
        '--nature-file ${SOURCES[0]}',
        '--proposer-file ${SOURCES[1]}',
        '--policy-name BlindApproval',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']

    sources = [c['create_nature'][0], c['create_proposer'][0]]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def plot_all_hists(env, outdir, c):
    targets = [
        join(outdir, 'approval_hist_loss.png'),
        join(outdir, 'approval_hist_human.png'),
        join(outdir, 'approval_hist_log.txt'),
    ]
    history_files = ",".join(["simulation_ttest/%s" % s for s in c['approval_hists']])
    cmd = [
        'python plot_policies.py',
	'--y-max',
        0.2,
	'--history-files',
        history_files,
	'--plot-mean',
	'--loss-plot ${TARGETS[0]}',
	'--human-plot ${TARGETS[1]}',
	'--log ${TARGETS[2]}',
    ]

    return env.Command(
        targets,
        c['approval_hists'],
        ' '.join(map(str, cmd)))
